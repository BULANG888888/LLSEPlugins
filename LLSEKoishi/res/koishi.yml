# Koishi 配置文件

# 配置项请参考：
# - https://koishi.chat/manual/advanced/config.html#%E7%90%86%E8%A7%A3%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6
# - https://koishi.chat/api/core/app.html
#
# 此文件为 yml 格式，关于此格式请见 https://www.ruanyifeng.com/blog/2016/07/yaml.html

host: localhost
port: 5140
maxPort: 5149

plugins:
  group:base:
    # 接收到的信息输出到控制台
    chat:

  group:database:
    # sqlite数据库
    database-sqlite:

  group:adapter:
    # OneBot 适配器
    # 配置参考 https://koishi.chat/plugins/adapter/onebot.html
    adapter-onebot:
      protocol: ws
      endpoint: ws://127.0.0.1:6700
      selfId: '123456789' # 改为机器人QQ，引号不要删

  # 绝对路径开头的插件请放在 ./plugins/LLSEKoishi 下
  group:llse:
    # OneBotBridge
    ./plugins/OneBotBridge:
      superusers: # 管理员列表，管理员可以在群聊执行服务器命令
        - 3076823485
      enableGroups: # 插件启用的群聊，会把服务器消息转发到这些群聊
        - 1105946125
      cmdPrefix: / # 群聊执行服务器命令的前缀
      cmdStatus: 查询 # 群聊查询服务器状态的命令
      pokeStatus: true # 能否戳一戳获取服务器状态
      allowCmd: # 群员能在群聊执行的命令，正则表达式匹配
        - ^list$

      specialAttrPrefix: §b[ # 格式化QQ特殊消息的前缀
      specialAttrSuffix: §b]§r # 格式化QQ特殊消息的后缀

      #### 自定义消息格式化模板 变量用 {{ }} 括起来 设为空字符串 '' 可以忽略该事件
      #### 插件使用 mustache.js 渲染变量
      # 服务器消息转群模板
      # - player：LLSE 玩家对象
      # - message：玩家发送的消息内容
      playerChatTemplate: >
        [服务器] {{player.realName}}：{{message}}
      # 群聊消息转服务器模板
      # - name：发送者名称
      # - session：Koishi会话 https://koishi.chat/api/core/session.html
      # - message：格式化QQ特殊消息后的文本
      groupChatTemplate: >
        §d§l[群聊] §r§a{{name}}§6（{{session.author.userId}}）§7： §r{{message}}
      # 玩家尝试进服群聊消息模板
      # - player：LLSE玩家对象
      playerPreJoinTemplate: >
        [服务器] {{player.realName}} 正在尝试进入服务器，XUID：{{player.xuid}}
      # 玩家尝试进服群聊消息模板
      # - player：LLSE玩家对象
      playerJoinTemplate: >
        [服务器] 欢迎 {{player.realName}} 进入服务器
      # 玩家尝试进服群聊消息模板
      # - player：LLSE玩家对象
      playerLeftTemplate: >
        [服务器] {{player.realName}} 退出了服务器
      # 玩家死亡消息模板
      # - player：LLSE玩家对象
      # - source：LLSE实体对象，或为空
      playerDieTemplate: >
        [服务器] {{player.realName}} {{#source}}被 {{source.name}} 撅死了{{/source}}{{^source}}暴毙了{{/source}}
      # 服务器状态返回消息模板
      # - cpuUsage: CPU占用百分比
      # - memory: 物理内存占用信息
      #   - used: 已用(M) 保留2位小数
      #   - remain: 剩余(M) 保留2位小数
      #   - total: 总计(M) 保留2位小数
      #   - percent: 占用百分比 保留2位小数
      # - disk: 磁盘占用信息
      #   - diskPath: BDS所在盘符
      #   - free: 剩余空间(G) 保留2位小数
      #   - used: 已用空间(G) 保留2位小数
      #   - size: 总计空间(G) 保留2位小数
      #   - percent: 占用百分比 保留2位小数
      # - bdsVersion: BDS版本号
      # - protocolVersion: 协议版本号
      # - llVersion: LL版本号
      # - plugins: 插件列表（string[]）
      # - players: 玩家列表（为以下属性组成的对象组成的数组）
      #   - pl: LLSE玩家对象
      #   - dv: LLSE设备对象
      serverStatTemplate: |
        CPU占用：{{cpuUsage}}%
        内存占用：{{memory.used}}M / {{memory.total}}M ({{memory.percent}}%)
        磁盘占用：{{disk.used}}G / {{disk.size}}G ({{disk.percent}}%)
        游戏版本：{{bdsVersion}}
        协议版本：{{protocolVersion}}
        LL版本：{{llVersion}}
        插件数量：{{plugins.length}}
        玩家列表（共 {{players.length}} 人）：
        {{#players}}
        {{pl.realName}} | {{dv.os}} | {{dv.avgPing}}ms
        {{/players}}

      # 自定义正则，详细用法请看下面示例
      # 如果觉得不够用联系我，我以后再加
      customRegex:
        # 玩家使用指令向群和服务器内播报示例
        - # 指定匹配条件，可以多个
          from:
            - # group 从群聊消息里匹配
              # console 从控制台输出中匹配
              type: console
              # 要匹配的正则
              regex: '\[Command\] <([a-zA-Z\s]+)> ([\s\S]*)'
          # 要执行的操作，可以多个
          actions:
            - # group 向群聊发送消息
              # console 执行控制台命令
              # reply 向来源群发消息（如果没有来源群作用和 group 相同）
              type: group
              # 为 group、reply 时为要发送的消息
              # 为 console 时为要执行的指令
              content: '[服务器] 玩家 $1 使用了指令 $2'
            # 另一个要执行的操作（向全服广播）
            - type: console
              content: 'tellraw @a {"rawtext":[{"text":"玩家 §a$1§r 使用了指令 §6$2"}]}'

        # 群内自定义问答示例
        - from:
            - type: group
              regex: ^好耶$
          actions:
            - type: reply
              content: 好好好！
